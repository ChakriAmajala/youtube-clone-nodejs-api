pipeline {
    agent any

    environment {
        WORK_DIR = "/var/lib/jenkins/workspace/youtubepage"
        DOCKERHUB_USER = 'chakriamajaladocker'
        IMAGE_NAME = 'youtubepage'
        IMAGE_TAG = 'latest'
        HOST_PORT = "8001"
        CONTAINER_PORT = "80"
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/ChakriAmajala/go-web-app-devops.git'
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                        sh "echo $PASS | docker login -u $USER --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
            }
        }

        stage('Deploy Container') {
            steps {
                script {
                    // Stop & remove existing container if running
                    sh "docker rm -f ${IMAGE_NAME} || true"
                    // Run new container
                    sh "docker run -d --name ${IMAGE_NAME} -p ${HOST_PORT}:${CONTAINER_PORT} ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Docker Swarm Deploy') {
            steps {
                script {
                    sh '''
                        docker service update --image ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME} || \
                        docker service create --name ${IMAGE_NAME} -p 8004:8080 --replicas 2 ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

    }
}

